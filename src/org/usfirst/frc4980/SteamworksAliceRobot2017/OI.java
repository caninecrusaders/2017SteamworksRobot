// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.SteamworksAliceRobot2017;

import org.usfirst.frc4980.SteamworksAliceRobot2017.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	//public static Joystick xBox;
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

	public static Joystick joystick;
	public static Joystick xbox;
	public JoystickButton xboxButtonA;
	public JoystickButton xboxButtonB;
	public JoystickButton xboxButtonX;
	public JoystickButton xboxButtonY;
	
	public JoystickButton joystickButton5;
	public JoystickButton joystickButton11;
	public JoystickButton joystickButton12;
	public JoystickButton joystickButton8;
	
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton1;
    public Joystick joystick1;
    public JoystickButton joystickButton2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
    	
    	joystick = new Joystick(0);
    	xbox = new Joystick(1);
    	
		xboxButtonA = new JoystickButton(xbox, 1);
        xboxButtonA.whenPressed(new shooterMotorTestDown());
        xboxButtonY = new JoystickButton(xbox, 4);
        xboxButtonY.whenPressed(new shooterMotorTestUp());
        xboxButtonB = new JoystickButton(xbox, 2);
        xboxButtonB.whenPressed(new shooterMotorOnTesting());
        xboxButtonB = new JoystickButton(xbox, 5);
        xboxButtonB.whenPressed(new GearLeanOut());
        xboxButtonB = new JoystickButton(xbox, 6);
        xboxButtonB.whenPressed(new GearLeanIn());
        
        //joystickButton2 = new JoystickButton(joystick, 2);
        //joystickButton2.whenPressed(new Shake());
        //joystickButton8 = new JoystickButton(joystick, 8);
        //joystickButton8.whenPressed(new ClearStickyFaults());
	
		joystickButton1 = new JoystickButton(joystick, 1);
	    joystickButton1.whileHeld(new shooterMotorOn());
	    joystickButton2 = new JoystickButton(joystick, 2);
        joystickButton2.whenPressed(new resetYaw());
        joystickButton5 = new JoystickButton(joystick, 5);
        joystickButton5.whileHeld(new Shake());
        joystickButton11 = new JoystickButton(joystick, 11);
        joystickButton11.whenPressed(new climberClimb());
        joystickButton12 = new JoystickButton(joystick, 12);
        joystickButton12.whenPressed(new collectorMotorOn());
        joystickButton8 = new JoystickButton(joystick, 8);
        joystickButton8.whenPressed(new ClearStickyFaults());
    	
    	    
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick1 = new Joystick(0);
        
        joystickButton1 = new JoystickButton(joystick1, 1);
        joystickButton1.whileHeld(new shooterMotorOn());


        // SmartDashboard Buttons
        SmartDashboard.putData("collectorMotorOff", new collectorMotorOff());
        SmartDashboard.putData("collectorMotorOn", new collectorMotorOn());
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("shooterMotorOn", new shooterMotorOn());
        SmartDashboard.putData("shooterMotorOff", new shooterMotorOff());
        SmartDashboard.putData("driveMecanum", new driveMecanum());
        SmartDashboard.putData("AutoDriveForward", new AutoDriveForward());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

