// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.SteamworksAliceRobot2017;

import org.usfirst.frc4980.SteamworksAliceRobot2017.subsystems.Collector;

import com.ctre.CANTalon;
import com.ctre.CANTalon.FeedbackDevice;

import edu.wpi.first.wpilibj.AnalogInput;
import edu.wpi.first.wpilibj.DoubleSolenoid;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    public static final String RobotDrive = null;
    public static CANTalon collectorCollectorMotor;
    public static CANTalon shootershooterMotor;
    public static CANTalon drivebasebackRightMotor;
    public static CANTalon drivebasebackLeftMotor;
    public static CANTalon drivebasefrontLeftMotor;
    public static CANTalon drivebasefrontRightMotor;
    public static RobotDrive drivebaseRobotDrive41;
    public static CANTalon drivebasebackRightMotor2;
    public static CANTalon drivebasebackLeftMotor2;
    public static Solenoid shooterGate;
    public static Solenoid shooterGate2;
    public static AnalogInput rangeFinder;
    public static DoubleSolenoid gearSolenoid;
    public static Servo climberRatchetServo;
    
    public static PIDSubsystem collector;
//	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
//    public static SpeedController shootershooterMotor;
//    public static SpeedController drivebasebackRightMotor;
//    public static SpeedController drivebasebackLeftMotor;
//    public static SpeedController drivebasefrontLeftMotor;
//    public static SpeedController drivebasefrontRightMotor;
//    public static RobotDrive drivebaseRobotDrive41;
//
//    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
    	shootershooterMotor = new CANTalon(8);
        LiveWindow.addActuator("Shooter", "shooter motor", (CANTalon) shootershooterMotor);
        
        collectorCollectorMotor = new CANTalon(2);
        LiveWindow.addActuator("Collector", "collectorMotor", (CANTalon) collectorCollectorMotor);
        
        drivebasebackRightMotor = new CANTalon(3);
//        drivebasebackRightMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
//        drivebasebackRightMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
        LiveWindow.addActuator("drivebase", "backRightMotor", (CANTalon) drivebasebackRightMotor);
        //drivebasebackRightMotor.setInverted(true);
        
        drivebasebackLeftMotor = new CANTalon(6);
     // drivebasebackLeftMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
//      drivebasebackLeftMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
        LiveWindow.addActuator("drivebase", "backLeftMotor", (CANTalon) drivebasebackLeftMotor);
        drivebasebackLeftMotor.setInverted(true);
        
        drivebasefrontLeftMotor = new CANTalon(7);
//      drivebasefrontLeftMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
//      drivebasefrontLeftMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
        LiveWindow.addActuator("drivebase", "frontLeftMotor", (CANTalon) drivebasefrontLeftMotor);
        drivebasefrontLeftMotor.setInverted(true);
        
        drivebasefrontRightMotor = new CANTalon(5);
//       drivebasefrontRightMotor.setFeedbackDevice(FeedbackDevice.QuadEncoder);
//      drivebasefrontRightMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
        LiveWindow.addActuator("drivebase", "frontRightMotor", (CANTalon) drivebasefrontRightMotor);
        //drivebasefrontRightMotor.setInverted(true);
        
        drivebasebackRightMotor2 = new CANTalon(1);
        LiveWindow.addActuator("drivebase", "backRightMotor2", (CANTalon) drivebasebackRightMotor2);
        drivebasebackRightMotor2.changeControlMode(CANTalon.TalonControlMode.Follower);
        drivebasebackRightMotor2.set(drivebasebackRightMotor.getDeviceID());
       // drivebasebackRightMotor2.reverseOutput(true);
        
       
        drivebasebackLeftMotor2 = new CANTalon(4);
        LiveWindow.addActuator("drivebase", "backleftMotor2", (CANTalon) drivebasebackLeftMotor2);
        drivebasebackLeftMotor2.setInverted(true);
        drivebasebackLeftMotor2.changeControlMode(CANTalon.TalonControlMode.Follower);
        drivebasebackLeftMotor2.set(drivebasebackLeftMotor.getDeviceID());
        //drivebasebackLeftMotor2.reverseOutput(true);
        
        drivebaseRobotDrive41 = new RobotDrive(drivebasefrontLeftMotor, drivebasebackLeftMotor,
              drivebasefrontRightMotor, drivebasebackRightMotor);
        shooterGate = new Solenoid(0, 1);
        LiveWindow.addActuator("Shooter", "Shooter Gate", shooterGate);
        
        shooterGate2 = new Solenoid(0, 0);
        LiveWindow.addActuator("Shooter", "Shooter Gate 2", shooterGate2);
        
        gearSolenoid = new DoubleSolenoid(2, 3);
        LiveWindow.addActuator("Gear", "Gear Solenoid", gearSolenoid);
        
        climberRatchetServo = new Servo(9);
        LiveWindow.addActuator("Climber", "Ratchet", climberRatchetServo);
        
        drivebaseRobotDrive41.setSafetyEnabled(true);
        drivebaseRobotDrive41.setExpiration(0.1);
        drivebaseRobotDrive41.setSensitivity(0.5);
        drivebaseRobotDrive41.setMaxOutput(1.0);
        
         rangeFinder = new AnalogInput(0);
         rangeFinder.setOversampleBits(4);
         rangeFinder.setAverageBits(2);
        
         
        
        //collector = new Collector();

//     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
//        shootershooterMotor = new Talon(4);
//        LiveWindow.addActuator("shooter", "shooterMotor", (Talon) shootershooterMotor);
//        
//        drivebasebackRightMotor = new TalonSRX(3);
//        LiveWindow.addActuator("drivebase", "backRightMotor", (TalonSRX) drivebasebackRightMotor);
//        
//        drivebasebackLeftMotor = new TalonSRX(0);
//        LiveWindow.addActuator("drivebase", "backLeftMotor", (TalonSRX) drivebasebackLeftMotor);
//        
//        drivebasefrontLeftMotor = new TalonSRX(1);
//        LiveWindow.addActuator("drivebase", "frontLeftMotor", (TalonSRX) drivebasefrontLeftMotor);
//        
//        drivebasefrontRightMotor = new TalonSRX(2);
//        LiveWindow.addActuator("drivebase", "frontRightMotor", (TalonSRX) drivebasefrontRightMotor);
//        
//        drivebaseRobotDrive41 = new RobotDrive(drivebasefrontLeftMotor, drivebasebackLeftMotor,
//              drivebasefrontRightMotor, drivebasebackRightMotor);
//        
//        drivebaseRobotDrive41.setSafetyEnabled(true);
//        drivebaseRobotDrive41.setExpiration(0.1);
//        drivebaseRobotDrive41.setSensitivity(0.5);
//        drivebaseRobotDrive41.setMaxOutput(1.0);
//
//
//    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
