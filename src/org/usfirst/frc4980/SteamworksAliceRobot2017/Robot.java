// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4980.SteamworksAliceRobot2017;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.SPI;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;

import com.kauailabs.navx.frc.*;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4980.SteamworksAliceRobot2017.commands.*;
import org.usfirst.frc4980.SteamworksAliceRobot2017.subsystems.*;
import org.usfirst.frc4980.SteamworksAliceRobot2017.commands.AutoDoNothing;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    SendableChooser autoChooser;

    public static OI oi;
    public static AHRS ahrs;
    public static double startingAngle;
    public static PowerDistributionPanel PDPPanel;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Collector collector;
    public static shooter shooter;
    public static drivebase drivebase;
    public static Gear gear;
    public static ShooterGate shooterGate;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    RobotMap.init();
    RobotMap.climberRatchetServo.setAngle(210);
    PDPPanel = new PowerDistributionPanel();
    CameraServer.getInstance().startAutomaticCapture();
    try {
    	ahrs = new AHRS(SPI.Port.kMXP);
    } catch(RuntimeException ex) {
    	DriverStation.reportError("Error instantiating navX-MXP"+ ex.getMessage(), true);
    }
    ahrs.reset();
    startingAngle = ahrs.getAngle();
    gear = new Gear();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        collector = new Collector();
        shooter = new shooter();
        drivebase = new drivebase();
        shooterGate = new ShooterGate();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autoChooser = new SendableChooser();
        autoChooser.addDefault("Do Nothing", new AutoDoNothing());
        autoChooser.addDefault("Gear Deposit Center", new AutoGearCenter());
        autoChooser.addDefault("Gear Deposit Left", new AutoGearLeft());
        autoChooser.addDefault("Gear Deposit Right", new AutoGearRight());
        SmartDashboard.putData("Autonomous", autoChooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
    	autonomousCommand = (Command) autoChooser.getSelected();
    	//autonomousCommand = new AutoGearLeft();
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber( "IMU_TotalYaw", ahrs.getAngle());
        SmartDashboard.putNumber( "IMU_TotalYaw", ahrs.getYaw());
        SmartDashboard.putData("Collector", Robot.collector);
        SmartDashboard.putBoolean("Is Inverted", Robot.drivebase.invert);
       // SmartDashboard.putData("Climber Servo", RobotMap.climberRatchetServo);
        SmartDashboard.putNumber("rangeFinderAVGVoltage", RobotMap.rangeFinder.getAverageVoltage());
        SmartDashboard.putNumber("rangeFinderdistanceMM", Robot.shooter.getRangeInches());
        
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
